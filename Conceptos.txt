//Como implementar CSS en React 

CSS Plano Index -Html
Framework CSS Index -Html
bootstrap
Material UI
Modulos CSS - React

Componetes 

SASS
Styled Componets 
Tailwind CSSContext


Cualquier forma se utiliza bastante 

CLASS : Es una palabra reservada de JS 
ClassName : Es una palabre directa para JSX 

Que es Hooks 
Son funciones que permiten enganchar nuestros componentes funcionales a características propias de un componente de clase. 
Es decir, proporcionan un estado y un ciclo de vida a estos componentes evitándonos a los desarrolladores el uso de las clases.

Categorias de Hooks:

*useState:
  
  El STATE o Estado es basicamente eso; cuales es el estado de nuestra aplicación.

  El estado es una variable con una información relevante en nuestra aplicación REACT, algunas veces el state pertenece a un componente
  en especifico o algunas veces deseas compartirlo a lo largo de diferentes componentes 

  //EJEMPLO useState.

  const[cliente,setCliente]=useState({})
  const[total,setTotal]=useState(0)
  const[clientes,setClientes]=useState([])
  const[modal,setModal]=useState(false)

  cliente = es la variable que contiene el valor del estado.

  setCliente = se le conoce como el modificador del estado, es la funcion que va modificar esa variable de cliente y unicamente esa no puede editar otros estados
              unicamente pueden modificar ese cliente y finalmente se peude ver que solo se tiene la funcion STATE.
  NOTA:todo lo que tenga SET es una funcion modificadora

  ({})= Es el inicializador de cliente se refiere que empieza como un objeto vacio.

  Cada vez que el STATE cambia,la aplicación de REACT va a renderizar y actualizarse con esos cambios.
  Para modificar es STATE,su utiliza la funcion que extraemos cuando declaramos el state en nuestro componente

*useEffect:
  Al usar este Hook, le estamos indicando a React que el componente tiene que hacer algo después de renderizarse. 
  React recordará la función que le hemos pasado (nos referiremos a ella como nuestro “efecto”), 
  y la llamará más tarde después de actualizar el DOM.

  Despues de useState es el mas utilizado

  useEffect siempre es un callback,que se ejecuta cuando un state cambia o cuando el componente esta listo.

  Es un sustituto de lo que antes era compoenentDidMount() y componentDidUpdate()

  Al ejecutarse automaticamente cuando el componente esta listo,es un excelente lugar para colocar codigo para consultar una API o LocalStorage

  Debido a que se le puede pasar una dependencia y estar escuchando por los cambios que sucedan en una variable, peude actualizar el 
  componente cuando ese cambio suceda.

  Sintaxys: 
    import {useEffect} from 'React'

    useEffect( () =>{
      console.log('El componente esta listo')
    },[aqui se ponen las dependecias ])

*useContext:
  Esta API nos permite acceder a datos globales de nuestra aplicación desde cualquier componente sin necesidad de pasar esta información manualmente mediante props, 
  a través de todos los niveles de componentes hasta llegar al que realmente lo necesita.

*useReducer:
*useCallback
*useMemo:
*useRef
*useImperativeHandle
*useRef
*useLayoyutEffect
*useDebugValue

REGLAS DE LOS HOOKS 
  Los hooks se colocaran en la parte superior de tus componentes de React.
  Osea antes del (return)

  No se deben colocar dentro de condicionales (if), tampoco despeus de un return

PROPS 
  Es la forma de pasarle Variables o funciones de otros componentes a otros.

  El state o Funciones que se crean en los componente, solo estaran disponibles en ese mismo componente 

  Esto evita no duplicar codigo  y reutilizar esas variables,STATE o estado y funciones en otros componentes es por medio de PROPS o Propiedades

  Nota: Los PROPS se pasan del padre al hijo, nunca se peuden pasar del hijo al padre.

SYNTAXIS:
  






